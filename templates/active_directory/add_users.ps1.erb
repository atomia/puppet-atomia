# Get passwords from .yaml files
$apppoolpass = "<%= IO.popen("#{@lookup_var} windows_base app_password #{@hierapath} #{@modulepath}").read.gsub(/\n/,'').gsub(/\r/,'') %>"
$windowsadminpass = "<%= IO.popen("#{@lookup_var} adjoin admin_password #{@hierapath} #{@modulepath}").read.gsub(/\n/,'').gsub(/\r/,'') %>"
$posixguestpass = "<%= IO.popen("#{@lookup_var} adjoin bind_password #{@hierapath} #{@modulepath}").read.gsub(/\n/,'').gsub(/\r/,'') %>"

Function AddUserToActiveDirectory($adUser,$password){
    Try{
        
        New-ADUser $adUser
        Set-ADAccountPassword -Identity $adUser -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $password -Force)
        Enable-ADAccount -Identity $adUser
        return 1
    }
    Catch{
        $error[0]
        "Could not create user"
        return 0
    }    

}

Function UserExists($aduser){
    
    $user = Get-ADUser $aduser -Properties Name,DistinguishedName

    if($user.Name -eq $nul){
        return 0
    }
    else{
        return 1
    }
}


Function GrantLogonService {
param($accountToAdd)
#written by Ingo Karstein, http://blog.karstein-consulting.com
#  v1.0, 01/03/2014

## <--- Configure here

if( [string]::IsNullOrEmpty($accountToAdd) ) {
	Write-Host "no account specified"
	exit
}

## ---> End of Config

$sidstr = $null
try {
	$ntprincipal = new-object System.Security.Principal.NTAccount "$accountToAdd"
	$sid = $ntprincipal.Translate([System.Security.Principal.SecurityIdentifier])
	$sidstr = $sid.Value.ToString()
} catch {
	$sidstr = $null
}

Write-Host "Account: $($accountToAdd)" -ForegroundColor DarkCyan

if( [string]::IsNullOrEmpty($sidstr) ) {
	Write-Host "Account not found!" -ForegroundColor Red
	exit -1
}

Write-Host "Account SID: $($sidstr)" -ForegroundColor DarkCyan

$tmp = [System.IO.Path]::GetTempFileName()

Write-Host "Export current Local Security Policy" -ForegroundColor DarkCyan
secedit.exe /export /cfg "$($tmp)" 

$c = Get-Content -Path $tmp 

$currentSetting = ""

foreach($s in $c) {
	if( $s -like "SeServiceLogonRight*") {
		$x = $s.split("=",[System.StringSplitOptions]::RemoveEmptyEntries)
		$currentSetting = $x[1].Trim()
	}
}

if( $currentSetting -notlike "*$($sidstr)*" ) {
	Write-Host "Modify Setting ""Logon as a Service""" -ForegroundColor DarkCyan
	
	if( [string]::IsNullOrEmpty($currentSetting) ) {
		$currentSetting = "*$($sidstr)"
	} else {
		$currentSetting = "*$($sidstr),$($currentSetting)"
	}
	
	Write-Host "$currentSetting"
	
	$outfile = @"
[Unicode]
Unicode=yes
[Version]
signature="`$CHICAGO`$"
Revision=1
[Privilege Rights]
SeServiceLogonRight = $($currentSetting)
"@

	$tmp2 = [System.IO.Path]::GetTempFileName()
	
	
	Write-Host "Import new settings to Local Security Policy" -ForegroundColor DarkCyan
	$outfile | Set-Content -Path $tmp2 -Encoding Unicode -Force

	#notepad.exe $tmp2
	Push-Location (Split-Path $tmp2)
	
	try {
		secedit.exe /configure /db "secedit.sdb" /cfg "$($tmp2)" /areas USER_RIGHTS 
		#write-host "secedit.exe /configure /db ""secedit.sdb"" /cfg ""$($tmp2)"" /areas USER_RIGHTS "
	} finally {	
		Pop-Location
	}
} else {
	Write-Host "NO ACTIONS REQUIRED! Account already in ""Logon as a Service""" -ForegroundColor DarkCyan
}

Write-Host "Done." -ForegroundColor DarkCyan
}


# Add apppooluser

if(! (UserExists "apppooluser")){
    if(AddUserToActiveDirectory "apppooluser" $apppoolpass){
        Add-ADGroupMember "Domain Admins" "apppooluser"
        GrantLogonService "apppooluser"
    }
} else {
	Set-ADAccountPassword -Identity "apppooluser" -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $apppoolpass -Force)
}

# Add PosixGuest
if(! (UserExists "PosixGuest")){
    AddUserToActiveDirectory "PosixGuest" $posixguestpass
} else {
	Set-ADAccountPassword -Identity "PosixGuest" -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $posixguestpass -Force)
}

# Add WindowsAdmin
if(! (UserExists "WindowsAdmin")){
    if(AddUserToActiveDirectory "WindowsAdmin" $windowsadminpass){
        Add-ADGroupMember "Domain Admins" "WindowsAdmin"
    }
} else {
	Set-ADAccountPassword -Identity "WindowsAdmin" -Reset -NewPassword (ConvertTo-SecureString -AsPlainText $windowsadminpass -Force)
}